<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lioooo]]></title>
  <link href="http://mrli.github.io/atom.xml" rel="self"/>
  <link href="http://mrli.github.io/"/>
  <updated>2014-04-07T17:16:01+08:00</updated>
  <id>http://mrli.github.io/</id>
  <author>
    <name><![CDATA[lioooo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[收集制作一个常用的脚本集合Gems --lioooo_utils]]></title>
    <link href="http://mrli.github.io/blog/2014/04/07/build-liooo-utils-gems/"/>
    <updated>2014-04-07T16:27:20+08:00</updated>
    <id>http://mrli.github.io/blog/2014/04/07/build-liooo-utils-gems</id>
    <content type="html"><![CDATA[<p>工作中把一些常用的脚本功能收集到一些,经过几次的使用.发现脚本功能还算比较的稳定.于是做一个常用gem方便以后直接使用.</p>

<h4>setp1:</h4>

<p>制作gem需要用到第三方库文件<a href="https://github.com/technicalpickles/jeweler">Jeweler</a></p>

<ol>
<li><p><code>gem install jeweler</code></p></li>
<li><p><code>jeweler lioooo_utils</code></p></li>
<li><p><code>cd lioooo_utils &amp;&amp; subl ./lioooo_utils</code></p></li>
<li><p>修改项目目录中的Rakefile 描述信息等</p></li>
</ol>


<h4>setp2:</h4>

<p>编写库文件,也就是gem的功能代码</p>

<ol>
<li><p>在项目文件中Gemfile中添加上所需要的第三方库文件</p></li>
<li><p>代码编写好后执行 <code>bundle install</code></p></li>
</ol>


<h4>setp3:</h4>

<ol>
<li><p>将写好的功能生成一个版本用于版本的控制等</p>

<p> <code>rake version:write MAJOR=0 MINOR=1 PATCH=0</code></p></li>
<li><p>在本地进行安装测试,若测试没有问题就release</p>

<p> <code>rake install</code></p></li>
<li><p>在测试时会遇到找不到<strong>lib</strong>库目录.这时需要在rakefile中添加</p>

<p> <code>gem.files = Dir.glob('lib/**/*.rb')</code></p>

<p>把库文件引入到加载路径中去.</p></li>
</ol>


<h4>setp4:</h4>

<p>发布版本到rubygems方便进行二次安装.</p>

<p>若发布成功后,便可以通过gem包的安装方式进行包的安装 <code>gem install lioooo_utils</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker的安装和使用]]></title>
    <link href="http://mrli.github.io/blog/2014/03/22/install-docker/"/>
    <updated>2014-03-22T16:35:37+08:00</updated>
    <id>http://mrli.github.io/blog/2014/03/22/install-docker</id>
    <content type="html"><![CDATA[<h4>Docker的安装</h4>

<p>Docker 是现在比较火的工具 <a href="http://www.oschina.net/search?scope=project&amp;q=docker">具体介绍</a>
下面记录在<a href="http://www.oschina.net/search?scope=project&amp;q=virtualbox">virtualboxVM</a>中的安装步骤 <a href="http://docs.docker.io/en/latest/installation/rhel/">Install Docker</a></p>

<ol>
<li><p>若没有安装过docker: <code>sudo yum -y install docker-io</code></p></li>
<li><p>若安装过docker: <code>sudo yum -y update docker-io</code></p></li>
<li><p>启动docker服务: <code>sudo service docker start</code></p></li>
<li><p>设置docker开机自启: <code>sudo chkconfig docker on</code></p></li>
<li><p>测试并克隆centos到docker中: <code>sudo docker run -i -t centos /bin/bash</code></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubySocket 编程例子]]></title>
    <link href="http://mrli.github.io/blog/2014/03/10/ruby-socket-study/"/>
    <updated>2014-03-10T16:43:24+08:00</updated>
    <id>http://mrli.github.io/blog/2014/03/10/ruby-socket-study</id>
    <content type="html"><![CDATA[<p>Ruby 的 Socket 类在默认情况下并不会被载入,它需要使用 require&#8217;socket&#8217; 导入.
其中包括了各种用于TCP套接字、UDP套接字的类,以及必要的基本类型。</p>

<p><strong>服务器部分</strong>
server.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'socket'
</span><span class='line'>
</span><span class='line'>server = TCPServer.new 2000 # Server bound to port 2000
</span><span class='line'>
</span><span class='line'>loop do
</span><span class='line'>  client = server.accept    # Wait for a client to connect
</span><span class='line'>  client.puts "Hello !"
</span><span class='line'>  client.puts "Time is #{Time.now}"
</span><span class='line'>  client.close
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>客户端部分</strong>
client.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'socket'
</span><span class='line'>
</span><span class='line'>s = TCPSocket.new 'localhost', 2000
</span><span class='line'>
</span><span class='line'>while line = s.gets # Read lines from socket
</span><span class='line'>  puts line         # and print them
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>s.close             # close socket when done</span></code></pre></td></tr></table></div></figure>


<p><strong>分别运行脚本输出:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello !
</span><span class='line'>Time is 2014-03-11 01:08:18 +0800</span></code></pre></td></tr></table></div></figure>


<p><strong>端口绑定的注意事项</strong></p>

<h5>规 则 1 : 不 要 使 用 0~1024 之 间 的 端 口</h5>

<p>这 些 端 口 是 作 为 熟 知(well-known)端口并保留给系统使用的。例如HTTP默认使用端口80,SMTP默认使用端口25,rsync默认使用端口873。绑定到这些端口通常需要root权限。</p>

<h5>规 则 2 : 不 要 使 用 49 000~65 535 之 间 的 端 口</h5>

<p>这 些 都 是 临 时(ephemeral )端口 。通常是由那些不需要运行在预定义端口,而只是需要一些端口作为临时之需的服务使用。它们也是后面所要讲到的连接协商(connection negotiation)过程的一部分。选择该范围内的端口可能会对一些用户造成麻烦。除此之外,</p>

<h5>建议使用1025~48 999之间的端口</h5>

<p>需要注意的是：如果你打算选用其中的一个作为服务器端口,那你应该看一下IANA的注册端口列表1,确保你的选择不会和其他流行的服务器冲突。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[克隆Virtualbox虚拟机后无Ip的解决方案]]></title>
    <link href="http://mrli.github.io/blog/2014/03/05/virtualbox-no-ip-config-issue/"/>
    <updated>2014-03-05T16:41:19+08:00</updated>
    <id>http://mrli.github.io/blog/2014/03/05/virtualbox-no-ip-config-issue</id>
    <content type="html"><![CDATA[<p> VirtualBox是一个免费的虚拟机软件,支持多平台运行.当开发需要运行多个虚拟机时.
 采用VBox的复制功能就显得特别方便.但是复制一个完整的镜像后.会发现新的镜像分配不到ip地址.就算你选择了<strong><em>初始化网卡MAC地址</em></strong>复制之后也往往会发现网络无法使用这个时候我们就需要手动做些处理.下面介绍需要做一些什么样的处理.</p>

<ol>
<li><p>删除网络配置文件:</p>

<p><code>sudo rm -f /etc/udev/rules.d/70-persistent-net.rules</code></p></li>
<li><p>删除<strong><em>/etc/sysconfig/network-scripts/ifcfg-eth0</em></strong> 中的 <strong><em>HWADDR</em></strong> 以及 <strong><em>UUID</em></strong> 配置项.</p></li>
<li><p>在 <strong><em>IPADDR</em></strong> 配置项中初始化好需要的IP地址例如 <strong><em>192.168.1.117</em></strong></p></li>
<li><p>重启系统 <code>sudo reboot</code></p></li>
<li><p>重新登录系统后 <code>ifconfig</code> 查看是否已经分配好了IP</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet 的环境搭建及使用]]></title>
    <link href="http://mrli.github.io/blog/2014/03/02/puppet-study/"/>
    <updated>2014-03-02T16:44:10+08:00</updated>
    <id>http://mrli.github.io/blog/2014/03/02/puppet-study</id>
    <content type="html"><![CDATA[<h5>软件包的安装</h5>

<p>  <strong><em>puppet 的安装有多种方式,这里使用yum的方式安装</em></strong></p>

<ol>
<li><p> 首先安装ruby环境<a href="https://www.ruby-lang.org/en/installation/">Ruby的安装</a></p></li>
<li><p> 安装puppet  <code>sudo yum install -y puppet-server puppet</code> <a href="http://docs.puppetlabs.com/guides/installation.html#red-hat-enterprise-linux-and-derivatives">Yum 安装Puppet</a></p></li>
<li><p> 检查是否安装成功 <code>ruby -v ; puppet --version</code> 若输出版本号表明安装成功</p></li>
</ol>


<p> <strong><em>puppet 的安装有多种方式,这里使用ruby的gem包的方式安装</em></strong></p>

<ol>
<li><p> 首先安装ruby环境 <code>brew install ruby</code> <a href="https://www.ruby-lang.org/en/installation/">Ruby的安装</a></p>

<p>1.1 安装puppet所依赖的第三方包 <code>gem install ruby-shadow -v 2.3.2</code></p></li>
<li><p> 安装puppet gem <code>gem install puppet -v 3.4.0</code> <a href="http://docs.puppetlabs.com/guides/installation.html">Puppet 的安装</a></p></li>
<li><p> 检查是否安装成功 <code>ruby -v ; puppet --version</code> 若输出版本号表明安装成功</p></li>
</ol>


<hr />

<h5>生成puppet的配置文件</h5>

<p>文章参考: <a href="http://docs.puppetlabs.com/guides/installation.html#mac-os-x">Gem 安装puppet的设置</a></p>

<ol>
<li><p>新建文件目录 <code>sudo mkdir -p /etc/puppet</code></p></li>
<li><p>拷贝puppet源目录中的: <code>cp sudo cp /usr/local/lib/ruby/gems/1.9.1/gems/puppet-3.4.0/conf/auth.conf /etc/puppet/</code></p></li>
<li><p>新建puppet的主配置文件 <code>sudo touch /etc/puppet/puppet.conf</code></p></li>
<li><p>打开puppet master 的<strong><em>8140</em></strong>端口: <code>sudo vi /etc/sysconfig/iptables</code> 添加如下内容, <strong><em>-A INPUT -m state &mdash;state NEW -m tcp -p tcp &mdash;dport 8140 -j ACCEPT</em></strong></p></li>
</ol>


<hr />

<h5>设置puppet</h5>

<p><a href="http://docs.puppetlabs.com/guides/configuring.html">官方配置文档</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>Master: 192.168.1.116 =&gt; master.puppet.org
</span><span class='line'>Agent : 192.168.1.117 =&gt; agent001.puppet.org
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>设置puppet master 服务器</p>

<p> 1.1 修改服务器端的host方便记忆和阅读 <code>sudo echo 'HOSTNAME=master.puppet.org' &gt;&gt; /etc/sysconfig/network</code></p>

<p> 1.2 添加一个测试文件,修改<strong><em>site.pp</em></strong> <code>sudo vi /etc/puppet/manifests/site.pp</code></p>

<p> <strong><em> node default{file{&ldquo;/tmp/agent001-puppet-org.txt&rdquo;:content=>&ldquo;this is agent001.puppet.org test file&rdquo;;}}</em></strong></p></li>
</ol>


<h5>其它</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[杂项记录]]></title>
    <link href="http://mrli.github.io/blog/2014/02/19/others/"/>
    <updated>2014-02-19T16:40:01+08:00</updated>
    <id>http://mrli.github.io/blog/2014/02/19/others</id>
    <content type="html"><![CDATA[<h5>修改mac用户到wheel用户组</h5>

<p> <a href="http://superuser.com/questions/64805/how-do-i-add-myself-to-the-wheel-group-to-use-cvs">参考</a>
<code>sudo   dscl . append /Groups/admin GroupMembership mile001</code> 成功后
<code>groups</code> 查看是否包括有<strong><em>wheel</em></strong>组</p>

<h5>添加ulimit到系统环境中去</h5>

<pre><code>echo "ulimit -c unlimited &gt; /dev/null 2&gt;&amp;1" &gt;&gt; ~/.bash_profile
source ~/.bash_profile
</code></pre>

<h5>Git设置全局的用户名</h5>

<p>设置后团队在提交代码后便可查到是谁做的</p>

<pre><code>$ git config --global user.name "lioooo"
$ git config --global user.email "lioooo@mile.com"
</code></pre>

<h5>设置linux的hostname永久生效</h5>

<pre><code>sudo echo 'HOSTNAME=agent001.puppet.org' &gt;&gt; /etc/sysconfig/network
</code></pre>

<h5>Rails 和 ActiveRecord 时间不8个小时处理方案</h5>

<p>在Rails.root/application.rb中添加<a href="http://ruby-china.org/topics/3254">参考</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.active_record.default_timezone = :local
</span><span class='line'>config.time_zone = 'Beijing'</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习octopress个人blog网站搭建]]></title>
    <link href="http://mrli.github.io/blog/2014/02/14/octopress-study/"/>
    <updated>2014-02-14T16:30:28+08:00</updated>
    <id>http://mrli.github.io/blog/2014/02/14/octopress-study</id>
    <content type="html"><![CDATA[<p>ocotpress 是一个<strong>独立博客网站</strong>用于记录和分享一些个人在开发中的心得和技巧等
下面我们就来试着搭建一个octopress的个人网站</p>

<h4>检查开发环境</h4>

<ol>
<li><p><strong>ruby</strong> 用于开发 <code>ruby -v</code></p></li>
<li><p><strong>Git</strong> 用于版本控制 <code>git --versions</code></p></li>
</ol>


<h5>取得ocotpress的源代码</h5>

<pre><code>git clone git://github.com/imathis/octopress.git lioooo-blog &amp;&amp; cd lioooo-blog

gem install bundler &amp;&amp; bundle install
</code></pre>

<h5>初始化octopress的运行环境</h5>

<pre><code>cd lioooo-blog &amp;&amp; bundle exec rake install
</code></pre>

<h5>运行octopress check 是否初始化ok</h5>

<pre><code>cd lioooo-blog &amp;&amp; bundle exec rake preview

open http://localhost:4000
</code></pre>

<h5>准备部署到github上去方便外网可以访问</h5>

<p> <strong>octopress</strong>提供多种部署方案,这里我们只实现部署到Github网站上去.
 其它的部署方案可以参考<a href="http://octopress.org/docs/deploying/">Octopress部署方案</a></p>

<ol>
<li><p>创建一个新的仓库到<strong>github</strong>:
<code>git://github.com/mlri/mrli.github.com</code></p></li>
<li><p>设置lioooo-blog的git<strong>url</strong>指向新的仓库:
<code>cd lioooo-blog &amp;&amp; bundle exec rake set_github_page</code></p></li>
<li><p>部署到github上去: <code>cd liooo-blog &amp;&amp; rake generate &amp;&amp; rake deploy</code></p></li>
<li><p>在浏览器中可以访问地址:<a href="http://mrli.github.com">http://mrli.github.com</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delayed_job 学习]]></title>
    <link href="http://mrli.github.io/blog/2014/01/10/delayed-job-in-ruby/"/>
    <updated>2014-01-10T16:37:13+08:00</updated>
    <id>http://mrli.github.io/blog/2014/01/10/delayed-job-in-ruby</id>
    <content type="html"><![CDATA[<h5>初始化环境</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "'delayed_job_active_record','4.0.0'" &gt;&gt; Rails.root/Gemfile
</span><span class='line'>
</span><span class='line'>cd Rails.root; bundle install
</span><span class='line'>
</span><span class='line'>bundle exec rake generate delayed_job:active_record
</span><span class='line'>
</span><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>以上执行完毕后基本的环境已经准备ok!</p>

<h5>启动delayed_job</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd Rails.root; script/delayed_job start</span></code></pre></td></tr></table></div></figure>


<h5>添加一个delayed_job 到代码中</h5>

<p>对于ruby 中的任何一个对象,都可以添加到delayed_job中去
例如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Myjob
</span><span class='line'>  def do_something
</span><span class='line'>     #your code
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>Myjob.new.delay.do_something</span></code></pre></td></tr></table></div></figure>


<h5>配置默认设置 <a href="https://github.com/collectiveidea/delayed_job#gory-details">参考配置</a></h5>

<p>在rails中可以自定义修改<strong><em>delayed_job</em></strong>的默认配置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd Rails.root; vi config/initializers/delayed_job_config.rb</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Delayed::Worker.destroy_failed_jobs = false
</span><span class='line'>Delayed::Worker.sleep_delay = 60
</span><span class='line'>Delayed::Worker.max_attempts = 3
</span><span class='line'>Delayed::Worker.max_run_time = 5.minutes
</span><span class='line'>Delayed::Worker.read_ahead = 10
</span><span class='line'>Delayed::Worker.default_queue_name = 'default'
</span><span class='line'>Delayed::Worker.delay_jobs = !Rails.env.test?</span></code></pre></td></tr></table></div></figure>


<h5>其它相关</h5>

<p><strong><strong><a href="https://github.com/ejschmitt/delayed_job_web">delayed_job</a></strong></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 搭建rails 开发环境]]></title>
    <link href="http://mrli.github.io/blog/2012/06/30/ubuntu-da-jian-rails-kai-fa-huan-jing/"/>
    <updated>2012-06-30T23:07:00+08:00</updated>
    <id>http://mrli.github.io/blog/2012/06/30/ubuntu-da-jian-rails-kai-fa-huan-jing</id>
    <content type="html"><![CDATA[<h3>利用这个星期六我在ubuntu上搭建了一个rails的开发环境包括:</h3>

<p>nginx,passenger,mysql,imagemagick,mongodb etc 等一些常用工具的安装和调试.<br/>
下面我把自己搭建的过程给分享出来,希望对你有用.</p>

<h2>修改终端的语言</h2>

<pre><code>sudo nano /etc/default/locale1
</code></pre>

<p>  修改默认的</p>

<pre><code>LANG=zh_CN.UTF-8
LANGUAGE=zh_CN:zh
</code></pre>

<p>  为:</p>

<pre><code>LANG="en_US.UTF-8"
LANGUAGE="en_US:en"
</code></pre>

<h2>下载并安装ruby</h2>

<pre><code>sudo apt-get remove --purge ruby1.8 #   删除原来的ruby1.8

* mkidr -p /opt/tools &amp;&amp; cd /opt/tools &amp;&amp; wget http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p194.tar.gz 

tar -xvf ruby-1.9.3-p194.tar.gz &amp;&amp; ./configure  --prefix=/opt/ruby &amp;&amp; make &amp;&amp; make install

nano ~/.bash_profile 添加内容 export PATH=/opt/ruby/bin:$PATH  # 把编译的ruby 加到环境变量中去让系统使用手动编译的ruby

source ~/.bash_profile  ( . ~/.bash_profile) # 使刚才修改的变量生效
</code></pre>

<h2>下载并安装mongodb:</h2>

<p><strong>mongodb用来存关系性数据非常方便,什么是关系性数据?类似于我可以在一个字段中存一个数组,一个hash,甚至一个对象等</strong></p>

<pre><code>cd /opt/tools &amp;&amp; wget http://fastdl.mongodb.org/linux/ongodb-linux-x86_64-2.0.6.tgz 

tar -xvf mongodb-linux-x86_64-2.0.6.tgz &amp;&amp; mv mongodb-linux-x86_64-2.0.6 ../mongodb 

mkdir -p /opt/mongodb/db /opt/mongodb/log &amp;&amp; touch /opt/mongodb/log/mongo.log       #创建mongodb所依赖的文件 

sudo mkdir -p /data/db &amp;&amp; sudo chown -R cici:cici /data/db # 生成一个数据存放的目录必须的

sudo nano /etc/rc.local ==&gt; /opt/mongodb/bin/mongod --fork --dbpath=/opt/mongodb/db     -   -logpath=/opt/mongodb/log/mongo.log #把mongodb 开机自起服务开起来

nano ~/.bash_profile 修改内容为 export PATH=/opt/ruby/bin:/opt/mongodb/bin:$PATH  #        把mongodb加到环境
* source ~/.bash_profile  ( . ~/.bash_profile) # 使刚才修改的变量生效
</code></pre>

<h2>以下内容中涉及到的库和安装包是通过ftp的方式上传到你本机的(如果你在测试中没有找到库,那你就到网上去下载对应的包就行了)</h2>

<h3>安装imagemagick(用于处理图片)</h3>

<pre><code>* cd /opt/tools &amp;&amp; tar -xvf imagemagick-6.7.1-1.tgz &amp;&amp; cd trevor-ImageMagick-e035047

* ./configure --prefix=/usr --with-bzlib=yes --with-fontconfig=yes --with-freetype=yes  
--with-gslib=yes --with-gvc=yes --with-jpeg=yes --with-jp2=yes --with-png=yes --with-   
tiff=yes 

* make &amp;&amp; sudo make install 

* convert --version #如果出现了提示符号就说明已经安装好了. 
</code></pre>

<h3>安装nginx(用于处理服务请求)</h3>

<pre><code>* gem install passenger  -v 3.0.12

* passenger-install-nginx-module
    期间会出现各种库文件的找不到,按照nginx安装教程的指导就可以解决.这里记录一个比较难的问题
    To install OpenSSL support for Ruby:
    Please run apt-get install libopenssl-ruby as root.

* cd /opt/tools/ruby-1.9.3-p194/ext/openssl &amp;&amp; ruby extconf.rb &amp;&amp; make &amp;&amp; make install

* passenger-install-nginx-module #按照提示再次安装 

* nano ~/.bash_profile 修改内容为 export PATH=/opt/ruby/bin:/opt/mongodb/bin:/opt/nginx/sbin:$PATH  # 把mongodb加到环境


* source ~/.bash_profile  ( . ~/.bash_profile) # 使刚才修改的变量生效

* mkdir -p include /opt/nginx/conf/sites-enabled #用于放置我们的配置文件

* nano /opt/nginx/conf/nginx.conf 添加内容" include /opt/nginx/conf/sites-  
enabled/*"到最后一行:

* sudo cp /opt/tools/for_centos/nginxd /etc/init.d/nginxd #把nginx的开机启动脚本加到init. 
d中

* sudo chmod +x /etc/init.d/nginxd #使之成为可执行文件 
</code></pre>

<h3>安装 mysql (参考:<a href="https://help.ubuntu.com/8.04/serverguide/mysql.html%EF%BC%89">https://help.ubuntu.com/8.04/serverguide/mysql.html%EF%BC%89</a></h3>

<pre><code>* sudo apt-get install mysql-server 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup 学习]]></title>
    <link href="http://mrli.github.io/blog/2012/05/20/backup-xue-xi/"/>
    <updated>2012-05-20T23:19:00+08:00</updated>
    <id>http://mrli.github.io/blog/2012/05/20/backup-xue-xi</id>
    <content type="html"><![CDATA[<p>用于备件数据库和文件等(主要是用ruby写的)文章参考: <a href="https://github.com/meskyanichi/backup">https://github.com/meskyanichi/backup</a></p>

<p>安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ gem install backup
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<p>生成一个backup配置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ backup generate:model --trigger db_backup --databases='mysql' --compressors='gzip' --config-path= ~/dev_study/gem/backup_study/
</span></code></pre></td></tr></table></div></figure>


<p>打开刚才生成的配置文件进行配置 <code>$ subl ~/dev_study/gem/backup_study</code></p>

<p>执行命令来进行备件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  $ backup perform --trigger db_backup  --root-path=~/dev_study/gem/backup_study/
</span></code></pre></td></tr></table></div></figure>


<p>加上自备份功能:</p>

<ul>
<li> gem install whenever (参考文章: <a href="https://github.com/javan/whenever">https://github.com/javan/whenever</a>)</li>
<li><p> cd ~/dev_study/gem/backup_study/</p></li>
<li><p> wheneverize.</p></li>
<li> subl . 修改config/schedule.rb文件(当你修改了whenever的时候 执行命令:whenever &mdash;update-crontab 来更新自动执行任务事件 )
加入自动执行的命令:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>every 1.day, :at =&gt; '12:13 am' do
</span><span class='line'>  command "backup perform --trigger db_backup  --root-path=~/dev_study/gem/backup_study"
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>由上就可以在每天 12:13 的时候执行backup 命令,而这个命令是备件数据</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jeweler学习]]></title>
    <link href="http://mrli.github.io/blog/2012/05/19/jewelerxue-xi/"/>
    <updated>2012-05-19T10:41:00+08:00</updated>
    <id>http://mrli.github.io/blog/2012/05/19/jewelerxue-xi</id>
    <content type="html"><![CDATA[<p>Jeweler 提供给ruby开发者二个强大的功能:</p>

<ul>
<li>用来管理和发布RubyGem项目版本</li>
<li>用特有的框架来生成一个新的RubyGem项目</li>
</ul>


<h2>下面我们就开始学习这个强大而简单的工具</h2>

<h1>安装</h1>

<pre><code>$ gem install jeweler
</code></pre>

<h1>生成项目文件</h1>

<p>当你安装好&#8221;jeweler&#8221;后,你就可以用&#8221;jeweler&#8221;命令来生成新的项目像下面一样:<br/>
这个需要一些git的配置信息(例如: name, email github account etc ..) 不用担心 &ldquo;jeweler&#8221;会帮你管理这些配置的</p>

<pre><code>$ jeweler ~/dev_study/gem/mrlic
</code></pre>

<p>生成过程中可以会发现:</p>

<p>No github.user found in ~/.gitconfig. Please tell git about your GitHub account (see <a href="http://github.com/blog/180-local-github-config">http://github.com/blog/180-local-github-config</a> for details). For example: git config &mdash;global github.user defunkt</p>

<p>意思说你要给&#8221;jeweler&#8221;一些关于github的信息处理方法很简单,在终端窗口执行命令:</p>

<pre><code>$ git config --global github.user you_github_account_name(你在github上的用户名)
</code></pre>

<p>进入到项目根目录:</p>

<pre><code>$ cd ~/dev_study/gem/mrlic 
</code></pre>

<p>安装依赖的gem包:</p>

<pre><code>$ bundle install 
</code></pre>

<p>顺便说一名喜欢用 &ldquo;<a href="http://ruby.taobao.org">http://ruby.taobao.org</a>&#8220;做为gem包的镜像地址,如果你喜欢你可以照下面来做<br/>
在 Gemfile中把&#8221;<a href="http://rubygems.org">http://rubygems.org</a>&#8220;替换成&#8221;<a href="http://ruby.taobao.org">http://ruby.taobao.org</a>&rdquo;,这样做的好处是安装包的时候速度快  <br/>
同时我在安装的过程中也出现错误,关于&#8221;bundle&#8221;和&#8221;rcov&#8221;版本的问题(由于错误信息较多,这里不一一讲述我把我的方法贴出来)<br/>
我处理的方法是:在Gemfile中把bundle的版本修改为＂1.1.3＂，&#8221;rcov&#8221; 版本修改为 &ldquo;0.9.11&rdquo;,等修改完后再次执行命令</p>

<pre><code>$ bundle install 
</code></pre>

<p>下面是我的Gemfile文件内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> source "http://ruby.taobao.org"
</span><span class='line'>  group :development do
</span><span class='line'>    gem "shoulda", "&gt;= 0"
</span><span class='line'>    gem "rdoc", "~&gt; 3.12"
</span><span class='line'>    gem "bundler", "~&gt; 1.1.3"
</span><span class='line'>    gem "jeweler", "~&gt; 1.8.3"
</span><span class='line'>    gem "rcov", "0.9.11"
</span><span class='line'>  end
</span></code></pre></td></tr></table></div></figure>


<h1>写自己的代码</h1>

<p>[最核心的功能]在项目中文件&#8221;lib/mrlic.rb&#8221;,因为这只是我测试的项目我写了一个方法,这个方法就是输出一字符串</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def desc
</span><span class='line'>     puts "this is mrli command collect"
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>给gem生成版本号,用于管理</p>

<pre><code>$　rake version:write MAJOR=0 MINOR=1 PATCH=0
</code></pre>

<p>执行命令(可以查看当前的版本)如果想了解更多的rake命令到项目根目录中执行<code>$ rake -T</code></p>

<pre><code>$ rake version
</code></pre>

<p>从本地文件中安装这个gem(mrlic)</p>

<pre><code>$ rake install
</code></pre>

<p>在运行的过程中你会发现错误信息:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake aborted!
</span><span class='line'>"FIXME" or "TODO" is not a description
</span></code></pre></td></tr></table></div></figure>


<p>我的处理方法是:在项目Rakefile文件中把内容为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  gem.summary = %Q{TODO: one-line summary of your gem}
</span><span class='line'>  gem.description = %Q{longer description of your gem}</span></code></pre></td></tr></table></div></figure>


<p>修改为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem.summary = "one-line summary of your gem"
</span><span class='line'>gem.description = "longer description of your gem"
</span></code></pre></td></tr></table></div></figure>


<p>修改后再次执行命令<code>$ rake install</code>如果成功的话会出现提示消息:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  Successfully built RubyGem
</span><span class='line'>  Name: mrlic
</span><span class='line'>  Version: 0.1.0
</span><span class='line'>  File: mrlic-0.1.0.gem
</span><span class='line'>  Executing "ruby -S gem install ./pkg/mrlic-0.1.0.gem":
</span><span class='line'>  ruby -S gem install ./pkg/mrlic-0.1.0.gem
</span><span class='line'>  Successfully installed mrlic-0.1.0
</span><span class='line'>  1 gem installed
</span></code></pre></td></tr></table></div></figure>


<h1>测试</h1>

<p>打开新的终端输入命令<code>$ pry</code>(<a href="pry.github.com">pry是一个非常好的命令交互工具</a>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] pry(main)&gt; require "mrlic"
</span><span class='line'>=&gt; true
</span><span class='line'>[2] pry(main)&gt; desc
</span><span class='line'>this is mrli command collect
</span><span class='line'>=&gt; nil
</span><span class='line'>[3] pry(main)&gt; 
</span></code></pre></td></tr></table></div></figure>


<p>可见&#8221;mrlic&#8221;gem已经在本志安装好了</p>

<h1>分享</h1>

<p>下面我们把这个gem放到github上分享给大家</p>

<ul>
<li> 在github上新一个和&#8221;mrlic&#8221;相同命名项目(没有账号的就注册一个&#8221;<a href="http://www.github.com">http://www.github.com</a>&#8221;)</li>
<li> 回到项目文件中 $ cd ~/dev_study/mrlic</li>
<li> git add .</li>
<li> git commit -a -m &ldquo;init mrlic&rdquo;</li>
<li> git pull (把刚才新建的项目pull下来和本地的合并)</li>
<li> $ rake release (在发布的过程中会让你输入&#8221;rubygems&#8221;的账号,没有的就注册一个)</li>
</ul>


<p>执行命令<code>$ rake release</code>如果一切顺利的话会出现信息:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> rm -r pkg/mrlic-0.1.0.gem
</span><span class='line'>  Committing mrlic.gemspec
</span><span class='line'>  Pushing master to origin
</span><span class='line'>  Tagging v0.1.0
</span><span class='line'>  Pushing v0.1.0 to origin
</span><span class='line'>  Generated: mrlic.gemspec
</span><span class='line'>  mrlic.gemspec is valid.
</span><span class='line'>    Successfully built RubyGem
</span><span class='line'>    Name: mrlic
</span><span class='line'>    Version: 0.1.0
</span><span class='line'>    File: mrlic-0.1.0.gem
</span><span class='line'>  Executing "gem push ./pkg/mrlic-0.1.0.gem":
</span><span class='line'>  gem push ./pkg/mrlic-0.1.0.gem
</span><span class='line'>  Enter your RubyGems.org credentials.
</span><span class='line'>  Don't have an account yet? Create one at http://rubygems.org/sign_up
</span><span class='line'>     Email:   lb563@foxmail.com
</span><span class='line'>  Password:  
</span><span class='line'>  Pushing gem to https://rubygems.org...
</span><span class='line'>  Signed in.
</span><span class='line'>  Pushing gem to https://rubygems.org...
</span><span class='line'>  Successfully registered gem: mrlic (0.1.0)
</span></code></pre></td></tr></table></div></figure>


<p>到此你的gem已经发布到公网上,并可以让其它人使用了<br/>
更多信息参考 <a href="https://github.com/technicalpickles/jeweler">jeweler</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pry学习]]></title>
    <link href="http://mrli.github.io/blog/2012/05/13/pryxue-xi/"/>
    <updated>2012-05-13T00:15:00+08:00</updated>
    <id>http://mrli.github.io/blog/2012/05/13/pryxue-xi</id>
    <content type="html"><![CDATA[<p>Pry是一种功能强大的专门用来替代ruby中脚本irb的工具。</p>

<ul>
<li>即时的查看源码的方法是怎么写的 (<code>edit-method Class#method</code>)</li>
<li>调用系统的shell命令 (start editors, run git, and rake from within Pry)</li>
<li>查看当前的状态 (<code>cd</code>, <code>ls</code> and friends)</li>
<li>运行时的调试 (use Pry as a developer console or debugger)</li>
</ul>


<h3>安装 pry</h3>

<pre><code>`$&gt; gem install pry`
</code></pre>

<h3>使用 pry</h3>

<pre><code>`$&gt; pry`
</code></pre>

<h3>对我来说常用的命令</h3>

<pre><code>.......
</code></pre>

<h3>更多</h3>

<pre><code>更多信息请查看官方文档[pry](http://pry.github.com/)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gon 学习]]></title>
    <link href="http://mrli.github.io/blog/2012/05/05/gon-xue-xi/"/>
    <updated>2012-05-05T11:08:00+08:00</updated>
    <id>http://mrli.github.io/blog/2012/05/05/gon-xue-xi</id>
    <content type="html"><![CDATA[<h3><strong>gon可以把controller中的变量传到js</strong></h3>

<pre><code>the can get your Rails variables in your js  
                             --form github
</code></pre>

<p>前些时间一直在找rails中有没有方法把action中的变量传到js文件中.<br/>
确实google了一下可以用方式 &ldquo;xx.js.erb&#8221;这样的方式传值但是总觉得这样不是很方便而且效率也不是很高.<br/>
于是又找了一下发现在<a href="http://railscasts.com/episodes/324-passing-data-to-javascript">railscast/passing-data-to-javascript</a>中有一期 &lsquo;<a href="https://github.com/gazay/gon">gon</a>&rsquo;
可以满足我的需求,于是到官方网站中看了下.  感觉确实要用好的多只需要简单的一些数据绑定就可相互传值.</p>

<p>下面是我用使用gem包的过程给大家分享出来:</p>

<!--more-->


<h2>安装(前提是你已经搭建好了rails的开发环境)</h2>

<h4>先生成一个学习的项目</h4>

<pre><code>执行命令: `$&gt; rails new gon_study`  

在这里我不用生成新的学习项目,因为我在前几周中已经生成了一个学习'active_admin'的学习项目 

并push到了github上面.为了不生成冗余的项目我就用这前的项目.如果你也有一个专门用于学习rails  

的项目,那我建议你可以不用生成新的项目直接用之前的学习项目就行了.
</code></pre>

<h4>设置项目</h4>

<pre><code>在rails项目中的 'Gemfile' 添加如下内容`gem 'gon', '3.0.2' `  

然后执行命令: `$&gt; bundle install`  

如果是你的rails版本比较的的早(2.3.x),那你需要这样做  

在项目的 `config/environment.rb` 文件中添加内容`onfig.gem 'gon', :version =&gt; '3.0.2'`    

然后执行命令: `$&gt;  rake gems:install`
</code></pre>

<h2>使用</h2>

<p>这时我以我的项目为例子(你可以到<a href="https://github.com/mrli/active_admin_study">mrli</a>上面下载我的源码)</p>

<h4>用编辑器找你的项目文件</h4>

<p>  <code>$&gt; cd ~/dev_study/ruby_rails/active_admin_study</code></p>

<p>  <code>$&gt; rails g controller gon_study index</code></p>

<ol>
<li><p> 打开 app_root/app/controller/gon_study_controllers.rb</p>

<p>在action &lsquo;index&rsquo; 中添加测试数据 &lsquo;gon.gon_study = &#8216;这是一个学习gon的测试例子&rsquo;&#8217;</p>

<p><code>app/views/layouts/application.html.erb</code></p>

<p>&#8220;` erb
<head>
  <title>some title</title>
  &lt;%= include_gon %>
  <!-- include your action js code -->
  &hellip;</p></li>
<li><p> 在你的application.js文件用下面的方法就可以取到action中传过来的数据</p>

<p>gon.gon_study</p></li>
<li><p> 在我的这个例子中我在gon_study-> index 页面加了一个链接,然后点击后会弹出一个框<br/>
这个框中的内容就是刚才从index中传过来的</p></li>
</ol>


<h4>官网的部分例子</h4>

<p>你可以在你的action中如下使用gon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@your_int</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'><span class="vi">@your_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="vi">@your_hash</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="n">gon</span><span class="o">.</span><span class="n">your_int</span> <span class="o">=</span> <span class="vi">@your_int</span>
</span><span class='line'><span class="n">gon</span><span class="o">.</span><span class="n">your_other_int</span> <span class="o">=</span> <span class="mi">345</span> <span class="o">+</span> <span class="n">gon</span><span class="o">.</span><span class="n">your_int</span>
</span><span class='line'><span class="n">gon</span><span class="o">.</span><span class="n">your_array</span> <span class="o">=</span> <span class="vi">@your_array</span>
</span><span class='line'><span class="n">gon</span><span class="o">.</span><span class="n">your_array</span> <span class="o">&lt;&lt;</span> <span class="n">gon</span><span class="o">.</span><span class="n">your_int</span>
</span><span class='line'><span class="n">gon</span><span class="o">.</span><span class="n">your_hash</span> <span class="o">=</span> <span class="vi">@your_hash</span>
</span><span class='line'>
</span><span class='line'><span class="n">gon</span><span class="o">.</span><span class="n">all_variables</span> <span class="c1"># &gt; {:your_int =&gt; 123, :your_other_int =&gt; 468, :your_array =&gt; [1, 2, 123], :your_hash =&gt; {&#39;a&#39; =&gt; 1, &#39;b&#39; =&gt; 2}}</span>
</span><span class='line'><span class="n">gon</span><span class="o">.</span><span class="n">your_array</span> <span class="c1"># &gt; [1, 2, 123]</span>
</span><span class='line'>
</span><span class='line'><span class="n">gon</span><span class="o">.</span><span class="n">clear</span> <span class="c1"># gon.all_variables now is {}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在js文件中取得传过来的数据:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">gon</span><span class="p">.</span><span class="nx">your_int</span><span class="p">)</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">gon</span><span class="p">.</span><span class="nx">your_other_int</span><span class="p">)</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">gon</span><span class="p">.</span><span class="nx">your_array</span><span class="p">)</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">gon</span><span class="p">.</span><span class="nx">your_hash</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/gazay/gon">更多用法请参考官方文档&hellip;.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activeadmin学习]]></title>
    <link href="http://mrli.github.io/blog/2012/05/01/xue-xi-active-admin/"/>
    <updated>2012-05-01T21:50:00+08:00</updated>
    <id>http://mrli.github.io/blog/2012/05/01/xue-xi-active-admin</id>
    <content type="html"><![CDATA[<h2>是什么?</h2>

<p>Active Admin 是一个用来创建管理数据的框架,通常对于开发都来说都是十分简单的.他提供了良好的接口和优美的界面<br/>
让你只做一点点的配置就可以管理数据.</p>

<h2>做什么?</h2>

<ol>
<li>让开发者快速的建立一个对数据具有强大管理功能的架构.<strong>不仅仅是(增删改查)</strong></li>
<li>提供给开发者强大的DSL功能和接口</li>
<li>确保开发人员可以轻松地定制的每一个实现的细节</li>
<li>构建公共的接口做为可共享的gems,有整个社区的发展。</li>
</ol>


<h2>开始第一个简单开发之旅:</h2>

<p>   这里我会做一个简单的例子,让大家来体会Active Admin 是怎么个方便,怎么个简单,怎么个好用.</p>

<h5>安装必要的开发环境(我的是环境是:rails(3.2.2)+ruby(1.9.3))安装gem包:</h5>

<p>  <code>$&gt; gem 'activeadmin'</code></p>

<h5>新创建一个项目:</h5>

<p>  <code>$&gt; rails new active_admin_study -d mysql  &amp;&amp; cd active_admin_study</code></p>

<h5>在项目根目录中生成相应的配置 :</h5>

<p>  打开项目中的Gemfile 然后加上内容</p>

<pre><code># 修改为taobao的镜像(主要是安装gem的时候速度快)
source 'http://ruby.taobao.org'

# 基本设置
gem 'rails', '3.2.3'
gem 'mysql2',"0.3.11"

# 管理数据的框架
gem 'activeadmin',"0.4.3"

# 用来调试程序(设断点等功能)
gem "pry-rails","0.1.6"

group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'
  gem 'uglifier', '&gt;= 1.0.3'
end

gem 'jquery-rails'
</code></pre>

<p>  然后执行命令<code>$&gt; bundle install</code> or <code>$&gt; bundle</code>等bundle执行完毕后</p>

<p>  <code>$&gt; rails generate active_admin:install</code></p>

<pre><code>1: 可能在执行的过程中会出现一个&lt;strong&gt;找不到"active_admin_study"数据库
  &lt;strong&gt;错误,处理方法是在自己的数据库中加一个名为"active_admin_study"的库 然后再次执行.

2: 如果成功执行的话会给你很多的提示信息,然后你根据提示信息设置其目录
</code></pre>

<h4>修改初始化migrate中的数据:</h4>

<p>   把初始化的默认用户修改为自己的用户名和密码也可以不用修改使用默认的</p>

<pre><code>User: admin@example.com  
Password: password  
</code></pre>

<h4>执行命令:</h4>

<pre><code>$&gt; rake db:migrate

$&gt; rails server
</code></pre>

<h4>访问服务:</h4>

<p>   <a href="http://localhost:3000/admin">http://localhost:3000/admin</a></p>

<p>   输入用户名和密码,如果能进去的话.说明你已经搭起了这个框架</p>

<h2>管理数据</h2>

<p>   这里我们来学习怎么来管理数据库表中的数据就把我们的&#8221;admin_user&#8221; 这张表来说吧.</p>

<h4>执行命令:</h4>

<p>  <code>$&gt; rails generate active_admin:resource AdminUser</code></p>

<p>他会生成所有关于管理&#8221;AdminUser&#8221;的文件,是的再次刷新页面你会发现多了一个&#8221;admin_user&#8221;菜单,点击后就进行了相应的管理页面</p>

<h2>完结</h2>

<p>  是的就这么简单,不需要你做任何的复杂的操作就可以生成这么一个简单而方便的管理框架,当然这只是一个小小的一般需求.
  还有很多特殊的需求我们也可以用这个来实现.你可以对比官方文档来使用,自定义等</p>

<p>  在我做的项目中就自己定制了很多东西,包括页面的呈现,数据的组装等</p>

<p>  我会把我的学习源码放到<a href="https://github.com/mrli/active_admin_study">mrli/github</a>你可以pull来直接使用</p>

<h2>更多</h2>

<p>  如果你遇到什么麻烦和使用心得,而且又具有分享精神的话,欢迎联系我(<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#108;&#98;&#53;&#54;&#51;&#x40;&#102;&#111;&#x78;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#108;&#98;&#x35;&#x36;&#51;&#64;&#x66;&#111;&#120;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a>)<br/>
  更多信息<a href="http://activeadmin.info/">active_admin</a></p>
]]></content>
  </entry>
  
</feed>
