<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | lioooo]]></title>
  <link href="http://mrli.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://mrli.github.io/"/>
  <updated>2014-04-14T11:40:54+08:00</updated>
  <id>http://mrli.github.io/</id>
  <author>
    <name><![CDATA[lioooo]]></name>
    <email><![CDATA[lb563@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[收集制作一个常用的脚本集合Gems(lioooo_utils)]]></title>
    <link href="http://mrli.github.io/blog/2014/04/07/del/"/>
    <updated>2014-04-07T16:27:20+08:00</updated>
    <id>http://mrli.github.io/blog/2014/04/07/del</id>
    <content type="html"><![CDATA[<p>工作中把一些常用的脚本功能收集到一些,经过几次的使用.发现脚本功能还算比较的稳定.于是做一个常用gem方便以后直接使用.</p>

<h4>setp1:</h4>

<p>制作gem需要用到第三方库文件<a href="https://github.com/technicalpickles/jeweler">Jeweler</a></p>

<ol>
<li><p><code>gem install jeweler</code></p></li>
<li><p><code>jeweler lioooo_utils</code></p></li>
<li><p><code>cd lioooo_utils &amp;&amp; subl ./lioooo_utils</code></p></li>
<li><p>修改项目目录中的Rakefile 描述信息等</p></li>
</ol>


<!--more-->


<h4>setp2:</h4>

<p>编写库文件,也就是gem的功能代码</p>

<ol>
<li><p>在项目文件中Gemfile中添加上所需要的第三方库文件</p></li>
<li><p>代码编写好后执行 <code>bundle install</code></p></li>
</ol>


<h4>setp3:</h4>

<ol>
<li><p>将写好的功能生成一个版本用于版本的控制等</p>

<p> <code>rake version:write MAJOR=0 MINOR=1 PATCH=0</code></p></li>
<li><p>在本地进行安装测试,若测试没有问题就release</p>

<p> <code>rake install</code></p></li>
<li><p>在测试时会遇到找不到<strong>lib</strong>库目录.这时需要在rakefile中添加</p>

<p> <code>gem.files = Dir.glob('lib/**/*.rb')</code></p>

<p>把库文件引入到加载路径中去.</p></li>
</ol>


<h4>setp4:</h4>

<p>发布版本到rubygems方便进行二次安装.</p>

<p>若发布成功后,便可以通过gem包的安装方式进行包的安装 <code>gem install lioooo_utils</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[收集制作一个常用的脚本集合Gems(lioooo_utils)]]></title>
    <link href="http://mrli.github.io/blog/2014/04/07/build-liooo-utils-gems/"/>
    <updated>2014-04-07T16:27:20+08:00</updated>
    <id>http://mrli.github.io/blog/2014/04/07/build-liooo-utils-gems</id>
    <content type="html"><![CDATA[<p>工作中把一些常用的脚本功能收集到一些,经过几次的使用.发现脚本功能还算比较的稳定.于是做一个常用gem方便以后直接使用.</p>

<h4>setp1:</h4>

<p>制作gem需要用到第三方库文件<a href="https://github.com/technicalpickles/jeweler">Jeweler</a></p>

<ol>
<li><p><code>gem install jeweler</code></p></li>
<li><p><code>jeweler lioooo_utils</code></p></li>
<li><p><code>cd lioooo_utils &amp;&amp; subl ./lioooo_utils</code></p></li>
<li><p>修改项目目录中的Rakefile 描述信息等</p></li>
</ol>


<!--more-->


<h4>setp2:</h4>

<p>编写库文件,也就是gem的功能代码</p>

<ol>
<li><p>在项目文件中Gemfile中添加上所需要的第三方库文件</p></li>
<li><p>代码编写好后执行 <code>bundle install</code></p></li>
</ol>


<h4>setp3:</h4>

<ol>
<li><p>将写好的功能生成一个版本用于版本的控制等</p>

<p> <code>rake version:write MAJOR=0 MINOR=1 PATCH=0</code></p></li>
<li><p>在本地进行安装测试,若测试没有问题就release</p>

<p> <code>rake install</code></p></li>
<li><p>在测试时会遇到找不到<strong>lib</strong>库目录.这时需要在rakefile中添加</p>

<p> <code>gem.files = Dir.glob('lib/**/*.rb')</code></p>

<p>把库文件引入到加载路径中去.</p></li>
</ol>


<h4>setp4:</h4>

<p>发布版本到rubygems方便进行二次安装.</p>

<p>若发布成功后,便可以通过gem包的安装方式进行包的安装 <code>gem install lioooo_utils</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubySocket 编程例子]]></title>
    <link href="http://mrli.github.io/blog/2014/03/10/ruby-socket-study/"/>
    <updated>2014-03-10T16:43:24+08:00</updated>
    <id>http://mrli.github.io/blog/2014/03/10/ruby-socket-study</id>
    <content type="html"><![CDATA[<p>Ruby 的 Socket 类在默认情况下并不会被载入,它需要使用 require'socket' 导入.
其中包括了各种用于TCP套接字、UDP套接字的类,以及必要的基本类型。</p>

<p><strong>服务器部分</strong>
server.rb</p>

<p>```
require &lsquo;socket&rsquo;</p>

<p>server = TCPServer.new 2000 # Server bound to port 2000</p>

<p>loop do
  client = server.accept    # Wait for a client to connect
  client.puts &ldquo;Hello !&rdquo;
  client.puts &ldquo;Time is #{Time.now}&rdquo;
  client.close
end
```</p>

<p><strong>客户端部分</strong>
client.rb</p>

<p>```
require &lsquo;socket&rsquo;</p>

<p>s = TCPSocket.new &lsquo;localhost&rsquo;, 2000</p>

<p>while line = s.gets # Read lines from socket
  puts line         # and print them
end</p>

<p>s.close             # close socket when done
```</p>

<!--more-->


<p><strong>分别运行脚本输出:</strong></p>

<p><code>
Hello !
Time is 2014-03-11 01:08:18 +0800
</code></p>

<p><strong>端口绑定的注意事项</strong></p>

<h5>规 则 1 : 不 要 使 用 0~1024 之 间 的 端 口</h5>

<p>这 些 端 口 是 作 为 熟 知(well-known)端口并保留给系统使用的。例如HTTP默认使用端口80,SMTP默认使用端口25,rsync默认使用端口873。绑定到这些端口通常需要root权限。</p>

<h5>规 则 2 : 不 要 使 用 49 000~65 535 之 间 的 端 口</h5>

<p>这 些 都 是 临 时(ephemeral )端口 。通常是由那些不需要运行在预定义端口,而只是需要一些端口作为临时之需的服务使用。它们也是后面所要讲到的连接协商(connection negotiation)过程的一部分。选择该范围内的端口可能会对一些用户造成麻烦。除此之外,</p>

<h5>建议使用1025~48 999之间的端口</h5>

<p>需要注意的是：如果你打算选用其中的一个作为服务器端口,那你应该看一下IANA的注册端口列表1,确保你的选择不会和其他流行的服务器冲突。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[delayed_job 学习]]></title>
    <link href="http://mrli.github.io/blog/2014/01/10/delayed-job-in-ruby/"/>
    <updated>2014-01-10T16:37:13+08:00</updated>
    <id>http://mrli.github.io/blog/2014/01/10/delayed-job-in-ruby</id>
    <content type="html"><![CDATA[<h5>初始化环境</h5>

<p>```</p>

<pre><code>echo "'delayed_job_active_record','4.0.0'" &gt;&gt; Rails.root/Gemfile

cd Rails.root; bundle install

bundle exec rake generate delayed_job:active_record

rake db:migrate
</code></pre>

<p>```</p>

<p>以上执行完毕后基本的环境已经准备ok!</p>

<!--more-->


<h5>启动delayed_job</h5>

<p><code>
cd Rails.root; script/delayed_job start
</code></p>

<h5>添加一个delayed_job 到代码中</h5>

<p>对于ruby 中的任何一个对象,都可以添加到delayed_job中去
例如:</p>

<p>```
class Myjob
  def do_something</p>

<pre><code> #your code
</code></pre>

<p>  end
end
Myjob.new.delay.do_something
```</p>

<h5>配置默认设置 <a href="https://github.com/collectiveidea/delayed_job#gory-details">参考配置</a></h5>

<p>在rails中可以自定义修改<strong><em>delayed_job</em></strong>的默认配置</p>

<p><code>
cd Rails.root; vi config/initializers/delayed_job_config.rb
</code></p>

<p><code>
Delayed::Worker.destroy_failed_jobs = false
Delayed::Worker.sleep_delay = 60
Delayed::Worker.max_attempts = 3
Delayed::Worker.max_run_time = 5.minutes
Delayed::Worker.read_ahead = 10
Delayed::Worker.default_queue_name = 'default'
Delayed::Worker.delay_jobs = !Rails.env.test?
</code></p>

<h5>其它相关</h5>

<p><strong><strong><a href="https://github.com/ejschmitt/delayed_job_web">delayed_job</a></strong></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[backup 学习]]></title>
    <link href="http://mrli.github.io/blog/2012/05/20/backup-xue-xi/"/>
    <updated>2012-05-20T23:19:00+08:00</updated>
    <id>http://mrli.github.io/blog/2012/05/20/backup-xue-xi</id>
    <content type="html"><![CDATA[<p>用于备件数据库和文件等(主要是用ruby写的)文章参考: <a href="https://github.com/meskyanichi/backup">https://github.com/meskyanichi/backup</a></p>

<p>安装</p>

<p>```</p>

<pre><code> $ gem install backup
</code></pre>

<p>```</p>

<p>生成一个backup配置</p>

<p>```</p>

<pre><code> $ backup generate:model --trigger db_backup --databases='mysql' --compressors='gzip' --config-path= ~/dev_study/gem/backup_study/
</code></pre>

<p>```</p>

<!--more-->


<p>打开刚才生成的配置文件进行配置 <code>$ subl ~/dev_study/gem/backup_study</code></p>

<p>执行命令来进行备件:</p>

<p>```</p>

<pre><code>  $ backup perform --trigger db_backup  --root-path=~/dev_study/gem/backup_study/
</code></pre>

<p>```</p>

<p>加上自备份功能:</p>

<ul>
<li> gem install whenever (参考文章: <a href="https://github.com/javan/whenever">https://github.com/javan/whenever</a>)</li>
<li><p> cd ~/dev_study/gem/backup_study/</p></li>
<li><p> wheneverize.</p></li>
<li> subl . 修改config/schedule.rb文件(当你修改了whenever的时候 执行命令:whenever &mdash;update-crontab 来更新自动执行任务事件 )
加入自动执行的命令:</li>
</ul>


<p>```
every 1.day, :at => &lsquo;12:13 am&rsquo; do
  command &ldquo;backup perform &mdash;trigger db_backup  &mdash;root-path=~/dev_study/gem/backup_study&rdquo;
end</p>

<p>```</p>

<p>由上就可以在每天 12:13 的时候执行backup 命令,而这个命令是备件数据</p>
]]></content>
  </entry>
  
</feed>
